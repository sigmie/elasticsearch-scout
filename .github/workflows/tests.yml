name: Tests

on:
    pull_request:
    push:
        branches:
            - main

jobs:
    php:
        name: 'Run tests with php ${{ matrix.php-version }}'
        runs-on: ubuntu-latest

        strategy:
            fail-fast: false
            max-parallel: 1  # all versions are using same elasticsearch and mysql service. They need to run 1 by 1.
            matrix:
                include:
                    - php-version: '8.1'
                    - php-version: '8.2'
        services:
            elasticsearch:
                image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.8.0
                ports:
                - 9200:9200
                options: -e="discovery.type=single-node" --health-cmd="curl http://localhost:9200/_cluster/health" --health-interval=10s --health-timeout=5s --health-retries=10
            mysql:
                image: mysql:5.7.22
                env:
                    MYSQL_RANDOM_ROOT_PASSWORD: true
                    MYSQL_DATABASE: elasticsearch-scout
                    MYSQL_USER: user
                    MYSQL_PASSWORD: password
                ports:
                    - 3306:3306
                options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

        steps:
            -   name: Checkout project
                uses: actions/checkout@v2

            -   name: Install and configure PHP
                uses: shivammathur/setup-php@v2
                with:
                    php-version: ${{ matrix.php-version }}
                    tools: 'composer'

            -   name: Get composer cache directory
                id: composer-cache-dir
                run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            -   name: Cache dependencies
                uses: actions/cache@v2
                id: composer-cache
                with:
                    path: ${{ steps.composer-cache-dir.outputs.dir }}
                    key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-composer-

            -   name: Install dependencies
                run: |
                    composer validate --strict
                    composer install --no-interaction --prefer-dist

            -   name: Run tests
                run: vendor/bin/phpunit --coverage-clover=coverage.xml

            -   name: Upload coverage to Codecov
                uses: codecov/codecov-action@v2
                with:
                    files: ./coverage.xml
                    fail_ci_if_error: true
                    verbose: true
